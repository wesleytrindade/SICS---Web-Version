@model SICS___WEB_2._0.Models.ViewModels.CadastroReagenteViewModel

@{
    ViewBag.Title = "SICS- Cadastro de Reagentes";
    Layout = "~/Views/Shared/_Layout.cshtml";
    String func = "";
}



<div class="featurette-divider" id="divisor">

    <h2 style="color:white"> Cadastro de Reagentes</h2>
</div>

@if (Model.listOrgao.Count <= 0)
{
     func = "cadastrarOrgao()";
}

else
{
     func = "checaCheckBox()";
}
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()


<div class="form-horizontal" id="formulario">

    @Html.ValidationSummary(true)
    <div class="form-group">
        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-3">
            @Html.TextBoxFor(model => model.Nome, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Nome)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CAS, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-2">
            @Html.TextBoxFor(model => model.CAS, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CAS)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Teor, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-1">
            @Html.TextBoxFor(model => model.Teor, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Teor)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Formula, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-2">
            @Html.TextBoxFor(model => model.Formula, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Formula)
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.GrupoSelecionado, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-3">
            @Html.DropDownListFor(model => model.GrupoSelecionado, new SelectList(Model.Grupo, "Value", "Text"), htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.GrupoSelecionado)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EstoqueMin, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-2">
            @Html.TextBoxFor(model => model.EstoqueMin, htmlAttributes: new { @id = "estoquemin", @onchange = "checaEstoqueMax()", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.EstoqueMin)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EstoqueMax, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-2">
            @Html.TextBoxFor(model => model.EstoqueMax, htmlAttributes: new { @id = "estoquemax",@onchange = "checaEstoqueMax()",@value = "",@class="form-control" })
            @Html.ValidationMessageFor(model => model.EstoqueMax)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Controlado, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-2">
            @Html.CheckBoxFor(model => model.Controlado, htmlAttributes: new { @id = "chkcontrolado", @onchange = func })
            @Html.ValidationMessageFor(model => model.Controlado)
        </div>
    </div>

    <div class="form-group" id="droporgao" hidden>
        @Html.LabelFor(model => model.OrgaoSelecionado, htmlAttributes: new { @class = "control-label col-md-2", @id = "labelform" })
        <div class="col-md-3">
            @Html.DropDownListFor(model => model.OrgaoSelecionado, new SelectList(Model.listOrgao, "Value", "Text"),htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.OrgaoSelecionado)
        </div>
    </div>



    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Cadastrar" class="btn btn-success" />
        </div>
    </div>
</div>
    }

@if (Model.listOrgao.Count <= 0)
{
    <script>

        function cadastrarOrgao() {
            alert("Favor Cadastrar os órgãos reguladores!");
            document.getElementById("chkcontrolado").checked = false;
        }

    </script>
}

else

{
    <script>

        function checaCheckBox() {
            var v = document.getElementById("chkcontrolado").checked;
            if (v == true) {


                document.getElementById("droporgao").hidden = false;
            }

            else {

                document.getElementById("droporgao").hidden = true;
            }
        }

        function checaEstoqueMax() {

            var estmin = document.getElementById("estoquemin").value;
            var estmax = document.getElementById("estoquemax").value;
            var soma = estmax - estmin

            if ((estmin > estmax) && (estmin != "")) {

                alert("O estoque mínimo não pode ser maior que o estoque máximo!");
                document.getElementById("estoquemin").value = "";
            }

            if ((soma<500) && (estmin != "" && estmax != "")) {

                alert("A diferença entre estoque mínimo e estoque máximo deve ser de no mínimo 500g!");
                document.getElementById("estoquemin").value = "";

            }
        }
        
   </script>
}
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
